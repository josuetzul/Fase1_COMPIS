# Generated from grammar/Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,188,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
        1,21,1,21,1,21,1,22,1,22,5,22,128,8,22,10,22,12,22,131,9,22,1,23,
        4,23,134,8,23,11,23,12,23,135,1,24,4,24,139,8,24,11,24,12,24,140,
        1,24,1,24,4,24,145,8,24,11,24,12,24,146,1,25,1,25,1,25,1,25,5,25,
        153,8,25,10,25,12,25,156,9,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,3,26,169,8,26,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,3,27,180,8,27,1,28,4,28,183,8,28,11,28,12,28,184,
        1,28,1,28,0,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,1,0,6,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,4,0,10,10,13,13,
        34,34,92,92,2,0,60,60,62,62,3,0,9,10,13,13,32,32,199,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,61,1,0,0,0,5,63,
        1,0,0,0,7,65,1,0,0,0,9,67,1,0,0,0,11,69,1,0,0,0,13,71,1,0,0,0,15,
        73,1,0,0,0,17,75,1,0,0,0,19,77,1,0,0,0,21,79,1,0,0,0,23,81,1,0,0,
        0,25,83,1,0,0,0,27,86,1,0,0,0,29,88,1,0,0,0,31,90,1,0,0,0,33,95,
        1,0,0,0,35,101,1,0,0,0,37,105,1,0,0,0,39,107,1,0,0,0,41,114,1,0,
        0,0,43,119,1,0,0,0,45,125,1,0,0,0,47,133,1,0,0,0,49,138,1,0,0,0,
        51,148,1,0,0,0,53,168,1,0,0,0,55,179,1,0,0,0,57,182,1,0,0,0,59,60,
        5,61,0,0,60,2,1,0,0,0,61,62,5,59,0,0,62,4,1,0,0,0,63,64,5,105,0,
        0,64,6,1,0,0,0,65,66,5,102,0,0,66,8,1,0,0,0,67,68,5,115,0,0,68,10,
        1,0,0,0,69,70,5,98,0,0,70,12,1,0,0,0,71,72,5,43,0,0,72,14,1,0,0,
        0,73,74,5,45,0,0,74,16,1,0,0,0,75,76,5,42,0,0,76,18,1,0,0,0,77,78,
        5,47,0,0,78,20,1,0,0,0,79,80,5,40,0,0,80,22,1,0,0,0,81,82,5,41,0,
        0,82,24,1,0,0,0,83,84,5,105,0,0,84,85,5,102,0,0,85,26,1,0,0,0,86,
        87,5,123,0,0,87,28,1,0,0,0,88,89,5,125,0,0,89,30,1,0,0,0,90,91,5,
        101,0,0,91,92,5,108,0,0,92,93,5,115,0,0,93,94,5,101,0,0,94,32,1,
        0,0,0,95,96,5,119,0,0,96,97,5,104,0,0,97,98,5,105,0,0,98,99,5,108,
        0,0,99,100,5,101,0,0,100,34,1,0,0,0,101,102,5,100,0,0,102,103,5,
        101,0,0,103,104,5,102,0,0,104,36,1,0,0,0,105,106,5,44,0,0,106,38,
        1,0,0,0,107,108,5,114,0,0,108,109,5,101,0,0,109,110,5,116,0,0,110,
        111,5,117,0,0,111,112,5,114,0,0,112,113,5,110,0,0,113,40,1,0,0,0,
        114,115,5,114,0,0,115,116,5,101,0,0,116,117,5,97,0,0,117,118,5,100,
        0,0,118,42,1,0,0,0,119,120,5,119,0,0,120,121,5,114,0,0,121,122,5,
        105,0,0,122,123,5,116,0,0,123,124,5,101,0,0,124,44,1,0,0,0,125,129,
        7,0,0,0,126,128,7,1,0,0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,
        1,0,0,0,129,130,1,0,0,0,130,46,1,0,0,0,131,129,1,0,0,0,132,134,7,
        2,0,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,
        0,0,0,136,48,1,0,0,0,137,139,7,2,0,0,138,137,1,0,0,0,139,140,1,0,
        0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,142,1,0,0,0,142,144,5,46,
        0,0,143,145,7,2,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,
        0,0,146,147,1,0,0,0,147,50,1,0,0,0,148,154,5,34,0,0,149,150,5,92,
        0,0,150,153,9,0,0,0,151,153,8,3,0,0,152,149,1,0,0,0,152,151,1,0,
        0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,157,1,0,
        0,0,156,154,1,0,0,0,157,158,5,34,0,0,158,52,1,0,0,0,159,160,5,116,
        0,0,160,161,5,114,0,0,161,162,5,117,0,0,162,169,5,101,0,0,163,164,
        5,102,0,0,164,165,5,97,0,0,165,166,5,108,0,0,166,167,5,115,0,0,167,
        169,5,101,0,0,168,159,1,0,0,0,168,163,1,0,0,0,169,54,1,0,0,0,170,
        180,7,4,0,0,171,172,5,62,0,0,172,180,5,61,0,0,173,174,5,60,0,0,174,
        180,5,61,0,0,175,176,5,61,0,0,176,180,5,61,0,0,177,178,5,33,0,0,
        178,180,5,61,0,0,179,170,1,0,0,0,179,171,1,0,0,0,179,173,1,0,0,0,
        179,175,1,0,0,0,179,177,1,0,0,0,180,56,1,0,0,0,181,183,7,5,0,0,182,
        181,1,0,0,0,183,184,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,
        186,1,0,0,0,186,187,6,28,0,0,187,58,1,0,0,0,10,0,129,135,140,146,
        152,154,168,179,184,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    ID = 23
    NUM = 24
    FLOAT = 25
    STRING = 26
    BOOL = 27
    DESI = 28
    WS = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "';'", "'i'", "'f'", "'s'", "'b'", "'+'", "'-'", "'*'", 
            "'/'", "'('", "')'", "'if'", "'{'", "'}'", "'else'", "'while'", 
            "'def'", "','", "'return'", "'read'", "'write'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "FLOAT", "STRING", "BOOL", "DESI", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "ID", "NUM", "FLOAT", "STRING", "BOOL", 
                  "DESI", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


